package com.tigres810.adventurermod.blocks;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.properties.PropertyDirection;
import net.minecraft.block.state.BlockStateBase;
import net.minecraft.block.state.BlockStateContainer;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class BlockProperties extends Block {

	public BlockProperties (Material materialIn) {
		super(materialIn);
		this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.DOWN));
	}

	
	public boolean canPlaceBlockAt(World worldIn, BlockPos pos) {

		return worldIn.getBlockState(pos).getBlock().isReplaceable(worldIn, pos);
	}
	
	public static PropertyDirection FACING = PropertyDirection.create("facing", EnumFacing.Plane.VERTICAL);
	
	@Override
	public void onBlockAdded(World worldIn, BlockPos pos, IBlockState state) {

		this.setDefaultFacing(worldIn, pos, state);
	}


	private void setDefaultFacing(World worldIn, BlockPos pos, IBlockState state) {
		
		if (!worldIn.isRemote) {
			Block block = worldIn.getBlockState(pos.north()).getBlock();
			Block block1 = worldIn.getBlockState(pos.south()).getBlock();
			Block block2 = worldIn.getBlockState(pos.west()).getBlock();
			Block block3 = worldIn.getBlockState(pos.east()).getBlock();
			EnumFacing enumFacing = (EnumFacing)state.getValue(FACING);
			
			if(enumFacing == enumFacing.NORTH && !block.isFullBlock(state) && !block1.isFullBlock(state)) {
				enumFacing = EnumFacing.SOUTH;
			} else if(enumFacing == enumFacing.SOUTH && !block.isFullBlock(state) && !block1.isFullBlock(state)) {
				enumFacing = EnumFacing.NORTH;
			} else if(enumFacing == enumFacing.WEST && !block.isFullBlock(state) && !block1.isFullBlock(state)) {
				enumFacing = EnumFacing.EAST;
			} else if(enumFacing == enumFacing.EAST && !block.isFullBlock(state) && !block1.isFullBlock(state)) {
				enumFacing = EnumFacing.WEST;
			}
			
			worldIn.setBlockState(pos, state.withProperty(FACING, enumFacing), 2);
		}
	}
	
	public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer) {
		return this.getDefaultState().withProperty(FACING, placer.getHorizontalFacing().getOpposite());
		
	}

	
	public int getRenderType() {
		return 3;
	}
	
	public IBlockState getStateFromMeta(int meta) {
		EnumFacing enumFacing = EnumFacing.getFront(meta);
		
		if(enumFacing.getAxis() == EnumFacing.Axis.Y) {
			enumFacing = EnumFacing.NORTH;
		}
		
		return this.getDefaultState().withProperty(FACING, enumFacing);
	}
	
	public int getMetaFromState(IBlockState state) {
		return ((EnumFacing)state.getValue(FACING)).getIndex();
	}
	
	
	protected BlockStateContainer createBlockState() {

		return new BlockStateContainer(this, new IProperty[] {FACING});
	}
	
	
	@SideOnly(Side.CLIENT)
	
	static final class SwitchEnumFacing {
		static final int[] FACING_LOOKUP = new int[EnumFacing.values().length];
		private static final String __OBFID = "CL_00002111";
		
		static {
			try {
				FACING_LOOKUP[EnumFacing.WEST.ordinal()] = 1;
			}
			catch (NoSuchFieldError var4) {
				;
			}
			try {
				FACING_LOOKUP[EnumFacing.EAST.ordinal()] = 2;
			}
			catch (NoSuchFieldError var3) {
				;
			}
			try {
				FACING_LOOKUP[EnumFacing.NORTH.ordinal()] = 3;
			}
			catch (NoSuchFieldError var2) {
				;
			}
			try {
				FACING_LOOKUP[EnumFacing.SOUTH.ordinal()] = 4;
			}
			catch (NoSuchFieldError var1) {
				;
			}
		}
	}
	
}
